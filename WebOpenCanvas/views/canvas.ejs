<!DOCTYPE>
<html>
<head>
  <meta charset="utf-8" />
  <script type="text/javascript" src="/js/lib/jquery-2.2.1.min.js"></script>
  <script type="text/javascript" src="/js/lib/bootstrap.min.js"></script>
  <script type="text/javascript" src="/js/lib/colorpicker.js"></script>
  <script type="text/javascript" src="/js/lib/bootstrap-slider.js"></script>
  <script type="text/javascript" src="/js/draggable.js"></script>
  <!-- <script type="text/javascript" src="/js/resizable.js"></script> -->
  <script type="text/javascript" src="/js/canvas.js"></script>
  <script type="text/javascript" src="/js/chat.js"></script>
  <script type="text/javascript" src="/js/mirroring-canvas.js"></script>

  <% if(isRoom == true) {%>
    <script type="text/javascript" src="/js/lib/socket.io.js"></script>
  <% }%>

  <link rel="stylesheet" href="/css/canvas.css">
  <link rel="stylesheet" 	href="/css/lib/bootstrap.min.css">
  <link rel="stylesheet" href="/css/lib/colorpicker.css">
  <link rel="stylesheet" 	href="/css/lib/slider.css">

</head>
<body>
  <% if(isRoom == true) {%>
  <div class="part-modal">
		<div class="modal fade in" style="display: block">
			<div class="modal-dialog" role="document">
				<div class="modal-content">
					<div class="modal-header">
						<h4 class="modal-title" id="">Start</h4>
					</div>
					<div class="modal-body">
						<form class="form-horizontal">
							<div class="form-group">
								<label for="" class="col-sm-2 control-label">User name</label>
								<div class="col-sm-10">
									<input type="text" class="form-control" id="modalChatName">
                  <span id="modalChatErr" class="help-block"></span>
								</div>
							</div>
						</form>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-default" data-dismiss="modal" id="modalChatCancel">Cancel</button>
						<button type="button" class="btn btn-primary" id="modalChatStart">Confirm</button>
					</div>
				</div>
			</div>
		</div>
		<div class="modal-backdrop fade in"></div>
	</div>
  <% } %>

	<div class="part-canvas">
		<div class="container">
			<div class="canvasDiv" id="canvasDiv"></div>
		</div>
	</div>
  <div id="chat" class="panel panel-default" style="display:none"></div>

  <script type="text/javascript">
    $(document).ready(function(){


      <% if(isRoom == true) {%>
        var socket = io.connect(document.location.origin + '/<%=roomNo %>');

  			if(socket != null && socket != undefined){
          var myCanvas,
              room = {
                roomNo : '<%=roomNo %>',
                person : 0,
                users : []
              };
          canvases = {};

          socket.on('disconnection', function(data){
            var msg = 'Terminate the connection';
            if(data.code == 'max'){
              msg += '\nIt has exceeded the maximum number of people.';
            }
            alert(msg);
            location.href = '/';
          });


          $('#modalChatStart').click(function(){
            socket.emit('join', {
              user : $('#modalChatName').val()
            });
          });

          $('#modalChatCancel').click(function(){
            socket.emit('close');
            location.href = "/";
          });

          socket.on('join-reject', function(data){
            var errMsg = 'An unknown error has occurred. Please proceed again from the beginning .';
            if(data.code == 'noroom'){
              errMsg = 'The room does not exist. Please proceed again from the beginning .';
            } else if(data.code == 'duplicated'){
              errMsg = 'The user name is already in use.';
            }
            $('#modalChatErr').val(errMsg);
          });


          socket.on('join-ok', function(data){
            socket.info = data.socket;
            room.users = data.room.users;

            $('.part-modal').remove();

            myCanvas = $('#canvasDiv').canvas({
              width : <%=width %>,
              height : <%=height %>,
              mousedown : function(data){
                socket.emit('mousedown', data);
              },
              mousemove : function(data){
                socket.emit('mousemove', data);
              },
              mouseup : function(data){
                socket.emit('mouseup', data);
              },
              mouseout : function(data){
                socket.emit('mouseout', data);
              },
              undo : function(){
                socket.emit('undo');
              },
              redo : function(){
                socket.emit('redo');
              }
            });

            chat = $('#chat').show().chat(room, socket);

            for(var i=0; i<room.users.length; i++){
              if(room.users[i] && room.users[i].id != socket.info.id){
                canvases[room.users[i].id] = $('#canvasDiv').addCanvasMirror(room.users[i].id);
              }
            }

            socket.on('changePerson', function(data){

              var msg = ' "' + data.user + '" ';
              if(data.status){
                room.person++;
                room.users.push({
                  id : data.id,
                  user : data.user
                });

                msg += 'has entered.';

                if(socket.info.id != data.id && !canvases[data.id]){
                  canvases[data.id] = $('#canvasDiv').addCanvasMirror(data.id);
                }

              } else {
                room.person--;
                for(var i=0; i<room.users.length; i++){
                  if(room.users[i] && room.users[i].id == data.id){
                    room.users.splice(i, 1);
                  }
                }

                msg += 'has left.';

                if(socket.info.id != data.id && canvases[data.id]){
                  canvases[data.id].destroy();
                }
              }
              chat.sysMsg(msg);
              chat.setUserCount(room.users.length);

            });
          });

          socket.on('mousedown', function(data){
            var target = canvases[data.id];
            if(target){
              if(!target.tool || data.tool != target.options.tool){
                target.setTool(data.tool);
              }

              if(target.color != data.color){
                target.color = data.color;
              }
              if(target.lineWidth != data.lineWidth){
                target.lineWidth = data.lineWidth;
              }

              if(target.tool.mousedown){
                target.tool.mousedown(data);
              } else {
                return false;
              }
            }

          });

          socket.on('mousemove', function(data){
            var target = canvases[data.id];
            if(target && target.tool.mousemove){
              target.tool.mousemove(data);
            } else {
              return false;
            }
          });

          socket.on('mouseup', function(data){
            var target = canvases[data.id];
            if(target && target.tool.mouseup){
              target.tool.mouseup(data);
            } else {
              return false;
            }
          });

          socket.on('mouseout', function(data){
            var target = canvases[data.id];
            if(target && target.tool.mouseout){
              target.tool.mouseout(data);
            } else {
              return false;
            }
          });

          socket.on('undo', function(data){
            var target = canvases[data.id];
            if(target){
              target.undo();
            } else {
              return false;
            }
          });

          socket.on('redo', function(data){
            var target = canvases[data.id];
            if(target){
              target.redo();
            } else {
              return false;
            }
          });


      	};


      <% } else {%>
        myCanvas = $('#canvasDiv').canvas({
          width : <%=width %>,
          height : <%=height %>
        });
      <% } %>


    });

  </script>

</body>
</html>
